<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>neomorning&#39;s blog</title>
    <description>Code monkey, soldering fume maker, fantasy/scifi addict, whah? A blog for like-minded people, and a notepad for myself. Have fun...
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Jun 2016 07:37:22 +0000</pubDate>
    <lastBuildDate>Thu, 02 Jun 2016 07:37:22 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Kickstarter Project Reward Watcher</title>
        <description>&lt;p&gt;As a regular Kickstarter project backer, it is very frustrating for me to see most of the early bird
reward tiles are all gone by the time I check the project. As a result, I came up with a simple Ruby
script to watch the project I’m interested in for me, and send me a push message to my iPhone once
the reward tile I want is available.&lt;/p&gt;

&lt;p&gt;This was the first time for me to write a script in Ruby, I found the language is surprisingly easy to
pick up, and spent little time to complete the tasks I had in mind. Here is how I did it.&lt;/p&gt;

&lt;h4 id=&quot;use-external-kickstarter-api&quot;&gt;Use External Kickstarter API&lt;/h4&gt;

&lt;p&gt;The best undocumented Kickstarter library I found is &lt;a href=&quot;https://github.com/markolson/kickscraper&quot;&gt;Kickscraper&lt;/a&gt;.
It is written in Ruby, and can get info on virtually anything from Kickstarter.&lt;/p&gt;

&lt;p&gt;Here is the kickstarter_watcher.rb I wrote, so that I can keep an eye on the €25 early bird tile
of &lt;a href=&quot;https://www.kickstarter.com/projects/573665728/common-loon-a-ruler-set-that-holds-a-world-of-crea&quot;&gt;Common Loon project&lt;/a&gt;
.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;kickscraper&amp;#39;
require &amp;#39;http&amp;#39;

# Part I
Kickscraper.configure do |config|
    # replace with your kickstarter account email
    config.email = &amp;#39;&amp;lt;kickstarter email&amp;gt;&amp;#39;
    # replace with your kickstarter account password
    config.password = &amp;#39;&amp;lt;kickstarter password&amp;gt;&amp;#39;
end

c = Kickscraper.client
# search project name containing &amp;quot;Common Loon&amp;quot;,
# and return first hit
vm = c.search_projects(&amp;#39;Common Loon&amp;#39;).first
# I cheated a bit here, counted my reward tile on the project page
# it is the 8th reward tile
reward = vm.rewards[8];

# USEFUL PROJECT RELATED INFO I USED FOR DEBUGGING PURPOSES
# print &amp;quot;==========================================================================================\n&amp;quot;
# print &amp;quot;Project Name: #{vm.name}\n&amp;quot;
# print &amp;quot;==========================================================================================\n&amp;quot;
# print &amp;quot;Reward Description:\n #{reward.description}\n&amp;quot;
# print &amp;quot;==========================================================================================\n&amp;quot;
# print &amp;quot;Backers Count: #{reward.backers_count}\n&amp;quot;
# print &amp;quot;Reward Limit: #{reward.limit}\n&amp;quot;

# output time stamp to log file, so that I could make sure the script actually runs
time1 = Time.new
puts &amp;quot;Current Time : &amp;quot; + time1.inspect + &amp;quot;\n\n&amp;quot;

# Part II
# Check if number of backers if below reward limit, if it is true,
# a pushover notification will be sent to my iPhone.  
if reward.backers_count &amp;lt; reward.limit
    HTTP.post(&amp;#39;https://api.pushover.net/1/messages.json&amp;#39;, :body =&amp;gt;
                &amp;quot;token=&amp;lt;pushover app token&amp;gt;&amp;amp;&amp;quot;\
                &amp;quot;user=&amp;lt;user id&amp;gt;&amp;amp;&amp;quot;\
                &amp;quot;message=#{vm.name}\nurls: #{vm.urls.web.project}&amp;amp;&amp;quot;\
                &amp;quot;title=Cheaper Reward Tile Available!!!&amp;quot;
                )
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Part I. of the code uses the Kickscraper to get reward tile info for Common Loon project for me. In order to use the API,
I had to enter my Kickstarter credentials to construct the client.&lt;/p&gt;

&lt;h4 id=&quot;use-pushover-to-send-notifications-to-iphone&quot;&gt;Use Pushover to Send Notifications to iPhone&lt;/h4&gt;
&lt;p&gt;Long time ago, I came across &lt;a href=&quot;https://pushover.net&quot;&gt;Pushover&lt;/a&gt; as a notification service triggered by simple POST API.
Although I remember I purchased the one-time charge service, I never had real use for it until now.&lt;/p&gt;

&lt;p&gt;I think I have the most basic plan, which gives me the ability to send 7500 messages per month for
free via their API calls. In order to send a verified message to my device, I specified following fields
in my POST request’s body:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;token: I have to register an application in Pushover, and uses the created applicant’s token&lt;/li&gt;
  &lt;li&gt;user: this is my user key on my dash board on Pushover&lt;/li&gt;
  &lt;li&gt;message: the content of the message I want to send&lt;/li&gt;
  &lt;li&gt;title: title of the message (optional)&lt;/li&gt;
  &lt;li&gt;priority: 1 for immediate notification. Alternatively, I can set up quiet hours and set the priority to a lower number. (optional)&lt;/li&gt;
  &lt;li&gt;device: specify which device I want to send the msg to (optional).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to receive the message on my phone, I downloaded the Pushover app on my iPhone, logged in with my
Pushover account and assigned a device name to my phone. When I log onto your Pushover dashboard in my browser afterwards,
I would see my device name got listed there.&lt;/p&gt;

&lt;p&gt;To make the POST request in Ruby, I have downloaded Ruby’s http library, by doing &lt;code&gt;sudo gem install http&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;write-a-crontab-script-on-mac-to-run-the-ruby-script-every-10-min&quot;&gt;Write a Crontab Script on Mac to Run the Ruby Script Every 10 min&lt;/h4&gt;
&lt;p&gt;Now everything is set up, I just need to run the Kickstarter watcher script regularly in the background. A simple crontab script
on mac is sufficient for the job.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;crontab -e # to edit the crontab file in vim

# enter following to the opened up editor, press i first to get into insert mode
*/10 * * * * /bin/bash -l -c &#39;ruby /Users/ning/Desktop/Ning/kickstarter/kickstarter_watcher.rb &amp;gt;&amp;gt; /Users/ning/Desktop/Ning/kickstarter/run.log&#39;

# then press :wq to save and quit, you should see a message &quot;crontab: installing new crontab&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I set a frequency of running the script every 10 min. Interestingly, I have to keep the asterisk (*) for 10 min on Mac.
The standard linux crontab timing format can be found &lt;a href=&quot;http://www.unixgeeks.org/security/newbie/unix/cron-1.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-06/Kickstarter-Project-Rewards-Watcher</link>
        <guid isPermaLink="true">/articles/2016-06/Kickstarter-Project-Rewards-Watcher</guid>
        
        
        <category>Ruby,</category>
        
        <category>Pushover,</category>
        
        <category>crontab</category>
        
      </item>
    
      <item>
        <title>Most Useful Mac Terminal Knowledge</title>
        <description>&lt;h2 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard Shortcuts&lt;/h2&gt;

&lt;p&gt;I use mac terminal almost daily, but for some reason, these keyboard shortcuts had evaded me
all these years…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to beginning of a line: &lt;code&gt;cmd + a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to end of a line: &lt;code&gt;cmd + e&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Move left word-by-word: &lt;code&gt;alt + &amp;lt;-&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Move right word-by-word: &lt;code&gt;alt + -&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;useful-unix-commands&quot;&gt;Useful Unix Commands&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Change ownership of a directory:
&lt;code&gt;
sudo chown -Rv &amp;lt;owner&amp;gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make soft link
&lt;code&gt;
cd &amp;lt;where you want to create the link&amp;gt;
ln -s &amp;lt;file installed location&amp;gt; &amp;lt;name of the link&amp;gt;
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit $Path variable
&lt;code&gt;
 PATH=$PATH\:/dir/path ; export PATH
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look for the port that is in use
&lt;code&gt;
lsof -i :&amp;lt;port number&amp;gt;
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Running a background server processing
&lt;code&gt;
sudo node app.js &amp;gt;&amp;gt; ~/node.log &amp;amp;
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;terminal-style&quot;&gt;Terminal Style&lt;/h2&gt;

&lt;p&gt;After using my personal terminal style for so long, it has become a necessity.
To be filled in later…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;color scheme + window transparency&lt;/li&gt;
  &lt;li&gt;prompt format&lt;/li&gt;
  &lt;li&gt;directory highlight&lt;/li&gt;
  &lt;li&gt;fortune + cowsay&lt;/li&gt;
  &lt;li&gt;shortcuts + aliases&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-05/Mac-Terminal-Knowlege</link>
        <guid isPermaLink="true">/articles/2016-05/Mac-Terminal-Knowlege</guid>
        
        
        <category>Mac</category>
        
        <category>Terminal</category>
        
      </item>
    
      <item>
        <title>Most Useful Git Operations</title>
        <description>&lt;p&gt;I am nowhere near to be a git expert. After using ClearCase as the version control tool for over a year,
git to me is an entirely new beast. One irritation I had using git was that it is pretty challenging
to memorize all the commands beyond git add, commit, and push. I would usually them up again and again
on StackOverflow, write them down on a scrap of paper and forget about them. Therefore, I am
dedicating this post to sum up all the most used git operations for me.&lt;/p&gt;

&lt;h4 id=&quot;delete-all-the-untracked-files-and-directories&quot;&gt;Delete All the Untracked Files and Directories&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git reset --hard HEAD
git clean -f -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;undo-git-add---all&quot;&gt;Undo git add –all&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git reset
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;deliver-changes-to-a-new-side-branch&quot;&gt;Deliver changes to a new side branch&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b &amp;lt;side branch name&amp;gt;
git add --all
git commit -m &quot;&amp;lt;message&amp;gt;&quot;
git push origin &amp;lt;side branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;deliver-a-side-branch-to-main-branch&quot;&gt;Deliver a side branch to main branch&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout master
git pull origin master
git merge &amp;lt;side branch name&amp;gt;  // Testing: make sure everything works
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-05/Git-Cmds-For-All-Occasions</link>
        <guid isPermaLink="true">/articles/2016-05/Git-Cmds-For-All-Occasions</guid>
        
        
        <category>Git</category>
        
        <category>Terminal</category>
        
      </item>
    
      <item>
        <title>Neural Network with Arduino 101</title>
        <description>&lt;h3 id=&quot;neurons-are-like-switches-that-are-connected-together&quot;&gt;Neurons Are Like Switches That Are Connected Together&lt;/h3&gt;
&lt;p&gt;When stimulated, a neuron could be thought as switched on, and it would activate other neutrons in the network. However, unlike switches, the amount of stimulus is related how strong each connections is. The output would be based on the stimulus passing through all these varying strength connections.&lt;/p&gt;

&lt;h3 id=&quot;how-software-models-neural-network&quot;&gt;How Software Models Neural Network&lt;/h3&gt;
&lt;p&gt;It uses Math of course! The software would receive a pattern an input, and it would adds up the input’s stimulus effect on each neutron and calculate the output, in a cascaded style.&lt;/p&gt;

&lt;p&gt;The software also has to have weights to define the strength of each neuron connection. For backpropagation algorithm specifically, the network is first initialized with random weights. Then the system would start receiving training sets (patterns that we know what they mean) and compare the computed outputs with the known outputs. If any error is found, the error is then fed back through the system to adjust the weights. After thousands or more training sets, all the weights inside the system would be adjusted to an optimal value to produce the correct output. Therefore, the system learned how to properly respond to (interprete) any input patterns.&lt;/p&gt;

&lt;p&gt;Example of a 3 layer feed forward network: [Input -&amp;gt; Hidden -&amp;gt; output].
This layout can solve any truth table!!!&lt;/p&gt;

&lt;!-- Code example goes here --&gt;

&lt;!-- Questions
1. Inside the same app, could multiple instance of tasks exist?
--&gt;

&lt;p&gt;&lt;a href=&quot;http://robotics.hobbizine.com/arduinoann.html&quot;&gt;For more detailed information, see this tutorial.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-04/Artificial-Neural_Network</link>
        <guid isPermaLink="true">/articles/2016-04/Artificial-Neural_Network</guid>
        
        
        <category>Arduino</category>
        
        <category>Machine</category>
        
        <category>Learning</category>
        
      </item>
    
      <item>
        <title>Real-time Signal Processing with Arduino</title>
        <description>&lt;p&gt;The objective of this exercise is to reproduce “Sitting Wave” using an Arduino. The audio signal from a microphone connected to the Arduino is modulated with a signal with a known frequency to bring the audio signal to base band. A low pass filter is applied to the result. Then the audio signal is output to SWIM stick to illustrate the phenomenon of the Sitting Wave with the use of a long exposure photograph.&lt;/p&gt;

&lt;h3 id=&quot;background-knowledge&quot;&gt;Background Knowledge&lt;/h3&gt;
&lt;p&gt;Nyquist Theorem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;We can only accurately measure frequencies equal or less than half of the sampling rate.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;arduino-timer&quot;&gt;Arduino Timer&lt;/h3&gt;

&lt;!-- Code example goes here --&gt;

&lt;!-- Questions
1. Inside the same app, could multiple instance of tasks exist?
--&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.adafruit.com/fft-fun-with-fourier-transforms?view=all&quot;&gt;You can find the awesome Adafruit tutorial here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.adafruit.com/adafruit-wave-shield-audio-shield-for-arduino?view=all&quot;&gt;Documentation on Wave Shield from Adafruit.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Graph&quot;&gt;Visualize Signal From Arduino&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-04/FFT-with-Arduino</link>
        <guid isPermaLink="true">/articles/2016-04/FFT-with-Arduino</guid>
        
        
        <category>Arduino</category>
        
      </item>
    
      <item>
        <title>Android Task and Activity Management</title>
        <description>&lt;p&gt;Definition of tasks and activities&lt;/p&gt;

&lt;h3 id=&quot;defining-launch-mode&quot;&gt;Defining Launch Mode&lt;/h3&gt;

&lt;h4 id=&quot;manifest-file&quot;&gt;Manifest file&lt;/h4&gt;
&lt;p&gt;Specified in &lt;activity&gt; element&#39;s launchMod attribute.&lt;/activity&gt;&lt;/p&gt;

&lt;!-- Code example goes here --&gt;

&lt;ul&gt;
  &lt;li&gt;standard (default)
    &lt;ul&gt;
      &lt;li&gt;creates a new instance of the activity in the task every time&lt;/li&gt;
      &lt;li&gt;each instance of the activity can belong to multiple tasks&lt;/li&gt;
      &lt;li&gt;each task can have multiple instances of activity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;singleTop
    &lt;ul&gt;
      &lt;li&gt;If activity already exists at the top of the current task, intent is routed to that instance through a call to its onNewIntent()&lt;/li&gt;
      &lt;li&gt;User is not able to press back button to go to the state before the new intent, because there is only one activity instance&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;This means that no 2 instances of same activity can exists next to each other on the stack&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;singleTask
    &lt;ul&gt;
      &lt;li&gt;Only one instance of activity can exist at a time. Later intents are routed to the existing instance through a call to its onNewIntent() method&lt;/li&gt;
      &lt;li&gt;Back button still returns the user to the previous activity contained in an existing task (may or may not be the same task the intent is called from), may create confusion?&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Android Browser application declares that the web browser activity should always open in its own task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;singleInstance
    &lt;ul&gt;
      &lt;li&gt;The activity is always the single and only member of its task&lt;/li&gt;
      &lt;li&gt;Any activities started by this activity open in a separate task&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;intent-flags&quot;&gt;Intent flags&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FLAG_ACTIVITY_NEW_TASK == singleTask&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FLAG_ACTIVITY_SINGLE_TOP == singleTop&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;If the activity is already running in the current task, then the intent is delivered to the resumed instance of the activity through onNewIntent() and all the activities above it are destroyed.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;FLAG_ACTIVITY_CLEAR_TOP + FLAG_ACTIVITY_NEW_TASK =&amp;gt; locating an existing activity in another task and putting it in a position where it can respond to the intent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Code example goes here --&gt;

&lt;!-- Questions
1. Inside the same app, could multiple instance of tasks exist?
--&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/guide/components/tasks-and-back-stack.html&quot;&gt;You can see the official Android reference page here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
        <link>/articles/2016-04/Android-task-and-activity-management</link>
        <guid isPermaLink="true">/articles/2016-04/Android-task-and-activity-management</guid>
        
        
        <category>Android</category>
        
      </item>
    
  </channel>
</rss>
